version: "3"

services:
  api-gateway:
    image: "quay.io/duodecim/ebmeds-api-gateway:${EBMEDS_VERSION}"
    env_file:
      - ./config.env
    volumes:
      - ./users.json:/app/resource/users.json
    ports:
      - 3001:3001
    networks:
      - ebmedsnet
    deploy:
      mode: replicated
      replicas: 1

  engine:
    # listens internally on port 3002 per default
    image: "quay.io/duodecim/ebmeds-engine:${EBMEDS_VERSION}"
    networks:
      - ebmedsnet
    env_file:
      - ./config.env
    deploy:
      mode: replicated
      replicas: 4
      restart_policy:
        condition: on-failure
        delay: 2s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        max_failure_ratio: 0.3

  clinical-datastore:
    # listens internally on port 3004 per default
    image: "quay.io/duodecim/ebmeds-clinical-datastore:${EBMEDS_VERSION}"
    networks:
      - ebmedsnet
    env_file:
      - ./config.env
    deploy:
      mode: replicated
      replicas: 1

  format-converter:
    # listens internally on port 3005 per default
    image: "quay.io/duodecim/ebmeds-format-converter:${EBMEDS_VERSION}"
    networks:
      - ebmedsnet
    env_file:
      - ./config.env
    deploy:
      mode: replicated
      replicas: 2

  caregap:
    # listens internally on port 3006 per default and we expose the port
    image: "quay.io/duodecim/ebmeds-caregap:${EBMEDS_VERSION}"
    networks:
      - ebmedsnet
    ports:
      - 3006:3006
    env_file:
      - ./config.env
    deploy:
      mode: replicated
      replicas: 1

  elasticsearch:
    # listens on port 9200 for REST API traffic and internally on port 9300 for node communication when clustered
    image: "docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}"
    env_file:
      - ./config.env
    volumes:
      - ebmeds-elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - ebmedsnet
    deploy:
        mode: replicated # should be global once clustered
        replicas: 1

  kibana:
    image: "docker.elastic.co/kibana/kibana:${ELK_VERSION}"
    volumes:
      - ./kibana/config/:/usr/share/kibana/config
    ports:
      - 5601:5601
    networks:
      - ebmedsnet
    deploy:
      mode: replicated
      replicas: 1 # should be enough

  logstash:
      # listens internally on ports 5000 and 5005 for tcp input per default
      image: "docker.elastic.co/logstash/logstash:${ELK_VERSION}"
      volumes:
        - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
        - ./logstash/config/pipelines.yml:/usr/share/logstash/config/pipelines.yml
        - ./logstash/pipeline/:/usr/share/logstash/pipeline/
        - ebmeds-logstash-queue:/usr/share/logstash/data/queue/
      networks:
        - ebmedsnet
      deploy:
        mode: replicated
        replicas: 1

  redis:
    # listens internally on port 6379 by default
    image: "redis:${REDIS_VERSION}"
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ebmeds-redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - ebmedsnet
    deploy:
      mode: replicated
      replicas: 1

  cmr:
    # listens internally on port 3003 by default
    image: "quay.io/duodecim/ebmeds-cmr:${EBMEDS_VERSION}"
    networks:
      - ebmedsnet
    deploy:
      mode: replicated
      replicas: 1

volumes:
  ebmeds-logstash-queue:
  ebmeds-elasticsearch-data:
  ebmeds-redis-data:
networks:
  ebmedsnet:

# docker network create --driver overlay ebmedsnet
# docker service create --name api-gateway --env-file config/api-gateway.env --constraint 'node.role == manager' --network ebmedsnet --publish 3001:3001 api-gateway
# docker service create --name engine --publish 3002:3002 --network ebmedsnet --env-file config/engine.env --replicas=4 --update-delay 10s --update-parallelism 1 engine
