---
- hosts: app
  pre_tasks:
    - name: Increase max file soft limit
      lineinfile:
        dest: /etc/security/limits.conf
        line: "* soft nofile 65535"
      tags:
        - docker
        - increase-file-soft-limit
        - increase-file-limit

    - name: Increase max file hard limit
      lineinfile:
        dest: /etc/security/limits.conf
        line: "* hard nofile 65535"
      tags:
        - docker
        - increase-file-hard-limit
        - increase-file-limit

    - name: Increase Virtual Memory map areas
      sysctl:
        name: vm.max_map_count
        value: 262144
        state: present
      tags:
        - docker
        - increase-vm-maxmap

    - name: Add group docker
      group:
        name: docker
        state: present
      tags:
        - docker
        - create-docker-group

    - name: Add Duodecim users to group docker in test environment
      user:
        name: "{{ item.username }}"
        groups: docker
        append: yes
      with_flattened:
        - "{{ customer_users | default([]) }}"
      when: env == "test" and customer_users is defined
      tags:
        - docker
        - add-duodecim-users-docker-group

    - name: Create user jenkins
      user:
        name: jenkins
        shell: /bin/bash
      tags:
        - allow-jenkins-access
        - jenkins-user

    - name: Give jenkins sudo permissions
      copy:
        dest: /etc/sudoers.d/jenkins
        content: "jenkins ALL = (ALL:ALL) NOPASSWD: ALL"
        validate: visudo -cf %s
      tags:
        - allow-jenkins-access
        - jenkins-sudo

    - name: Allow Jenkins to log in as jenkins
      authorized_key: "user=jenkins key='{{ item }}'"
      with_file:
        - "{{ inventory_dir }}/../jenkins_id_rsa.pub"
      tags:
        - allow-jenkins-access
        - jenkins-pubkey
  roles:
    - role: docker
      tags: docker
  tasks:
    - name: Install EPEL repository
      yum:
        name: epel-release
        state: installed
      tags:
        - docker
        - docker-compose
        - docker-compose-prereq

    - name: Install Python pip
      yum:
        name: python-pip
        state: installed
      tags:
        - docker
        - docker-compose
        - docker-compose-prereq

    - name: Install Docker Compose
      pip:
        name: docker-compose
      tags:
        - docker
        - docker-compose
        - install-docker-compose

    - name: Install Docker cleanup script as cron task
      copy:
        src: docker-cleanup
        dest: /etc/cron.daily/docker-cleanup
        owner: root
        group: root
        mode: 0700
      tags:
        - docker
        - install-docker-cleanup

    - name: Exclude Docker packages from yum
      lineinfile:
        dest: /etc/yum.conf
        line: 'exclude=docker*'
        insertafter: '\[main\]'
        state: present
      tags:
        - docker
        - exclude-docker-pkg

    - name: Determine Docker Swarm status
      shell: "docker info | egrep '^Swarm: ' | cut -d ' ' -f2"
      register: swarmstatus
      tags:
        - docker
        - docker-swarm-status

    - name: Create swarm_active group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_active
      with_items: "{{ play_hosts }}"
      #when: "'active' in swarmstatus.stdout_lines and 'inactive' not in swarmstatus.stdout_lines"
      when: swarmstatus.stdout == "active"
      run_once: true
      tags:
        - docker
        - create-active-group

    - name: Create swarm_inactive group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_inactive
      with_items: "{{ play_hosts }}"
      #when: "'active' not in swarmstatus.stdout_lines"
      when: swarmstatus.stdout == "inactive"
      run_once: true
      tags:
        - docker
        - create-inactive-group

- hosts: swarm_inactive[0]
  tasks:
    - name: Initialize Docker Swarm on first node
      shell: "docker swarm init --advertise-addr {{ ansible_default_ipv4.address }}"
      register: init_first_node
      when: "'swarm_active' not in groups"
      tags:
        - docker
        - init-docker-swarm

    - name: Add initialized node to swarm_active group
      add_host:
        hostname: "{{ play_hosts[0] }}"
        groups: swarm_active
      when: init_first_node.changed
      tags:
        - docker
        - add-init-node-active-group

- hosts: swarm_active[0]
  tasks:
    - name: Retrieve Swarm manager token
      shell: docker swarm join-token -q manager
      register: swarm_manager_token
      tags:
        - docker
        - retrieve-swarm-manager-token

    - name: Populate list of manager node IPs
      add_host:
        hostname: "{{ hostvars[item].ansible_default_ipv4.address }}"
        groups: swarm_manager_ips
      with_items: "{{ play_hosts }}"
      tags:
        - docker
        - populate-list-manager-ips

- hosts: swarm_inactive:!swarm_active
  vars:
    token: "{{ hostvars[groups['swarm_active'][0]].swarm_manager_token.stdout }}"
  tasks:
    - name: Join manager nodes to cluster
      shell: "docker swarm join --advertise-addr={{ ansible_default_ipv4.address }}:2377 --token={{ token }} {{ groups['swarm_manager_ips'][0] }}:2377"
      tags:
        - docker
        - join-manager-nodes