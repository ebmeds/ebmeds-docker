---
- hosts: app
  tasks:
    - name: Login to Duodecim Docker registry
      shell: 'docker login -u="{{ docker_registry_login }}" -p="{{ docker_registry_token }}" quay.io'

    - name: Check if ebmedsnet overlay network exists
      shell: 'docker network inspect ebmedsnet'
      changed_when: false
      ignore_errors: true
      run_once: true
      register: ebmedsnet
      tags:
        - elk

    - name: Create ebmedsnet overlay network
      shell: 'docker network create --driver overlay ebmedsnet'
      when: ebmedsnet.rc != 0
      run_once: true
      tags:
        - elk

    - name: Create data directory for Docker volumes
      file:
        path: /var/lib/docker-data
        state: directory
        owner: root
        group: root
        mode: 0755
      tags:
        - elk

    - name: Create data directories for ELK stack
      file:
        path: "/var/lib/docker-data/{{ item.name }}"
        state: directory
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
      with_items:
        - name: elasticsearch
          owner: 1000
          group: 1000
          mode: '0755'
        - name: kibana
          owner: 1000
          group: 1000
          mode: '0775'
        - name: logstash
          owner: 1000
          group: 1000
          mode: '0755'
        - name: logstash/config
          owner: 1000
          group: 1000
          mode: '0755'
        - name: logstash/pipeline
          owner: 1000
          group: 1000
          mode: '0755'
        - name: logstash/queue
          owner: 1000
          group: 1000
          mode: '0755'
      tags:
        - elk

    - name: Set SELinux context
      sefcontext:
        target: /var/lib/docker-data/logstash/queue
        setype: svirt_sandbox_file_t
        state: present
      tags:
        - elk

    - name: Restore SELinux context
      shell: 'restorecon -v /var/lib/docker-data/logstash/queue'
      tags:
        - elk

    - name: Copy configuration for ELK stack
      template:
        src: "{{ item.src }}"
        dest: "/var/lib/docker-data/{{ item.dest }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
      with_items:
        - src: docker/kibana.yml.j2
          dest: kibana/kibana.yml
          mode: '0664'
          owner: root
          group: root
        - src: docker/logstash.yml.j2
          dest: logstash/config/logstash.yml
          mode: '0644'
          owner: 1000
          group: 1000
        - src: docker/logstash.conf.j2
          dest: logstash/pipeline/logstash.conf
          mode: '0644'
          owner: 1000
          group: 1000
      tags:
        - elk

    - name: Check if Elasticsearch volume exists
      shell: 'docker volume inspect elasticsearch'
      changed_when: false
      ignore_errors: true
      register: elasticsearchvolume
      tags:
        - elk

    - name: Create Elasticsearch volume
      shell: 'docker volume create --name elasticsearch --opt type=none --opt device=/var/lib/docker-data/elasticsearch --opt o=bind'
      when: elasticsearchvolume.rc != 0
      tags:
        - elk

    - name: Check if Kibana volume exists
      shell: 'docker volume inspect kibana'
      changed_when: false
      ignore_errors: true
      register: kibanavolume
      tags:
        - elk

    - name: Create Kibana volume
      shell: 'docker volume create --name kibana --opt type=none --opt device=/var/lib/docker-data/kibana --opt o=bind'
      when: kibanavolume.rc != 0
      tags:
        - elk

    - name: Check if Logstash config volume exists
      shell: 'docker volume inspect logstash-config'
      changed_when: false
      ignore_errors: true
      register: logstashconfigvolume
      tags:
        - elk

    - name: Create Logstash config volume
      shell: 'docker volume create --name logstash-config --opt type=none --opt device=/var/lib/docker-data/logstash/config --opt o=bind'
      when: logstashconfigvolume.rc != 0
      tags:
        - elk

    - name: Check if Logstash pipeline volume exists
      shell: 'docker volume inspect logstash-pipeline'
      changed_when: false
      ignore_errors: true
      register: logstashpipelinevolume
      tags:
        - elk

    - name: Create Logstash pipeline volume
      shell: 'docker volume create --name logstash-pipeline --opt type=none --opt device=/var/lib/docker-data/logstash/pipeline --opt o=bind'
      when: logstashpipelinevolume.rc != 0
      tags:
        - elk

    - name: Check if Logstash queue volume exists
      shell: 'docker volume inspect logstash-queue'
      changed_when: false
      ignore_errors: true
      register: logstashqueuevolume
      tags:
        - elk

    - name: Create Logstash queue volume
      shell: 'docker volume create --name logstash-queue --opt type=none --opt device=/var/lib/docker-data/logstash/queue --opt o=bind'
      when: logstashqueuevolume.rc != 0
      tags:
        - elk

    - name: Pull Elasticsearch Docker image
      shell: 'docker pull docker.elastic.co/elasticsearch/elasticsearch:5.3.2'
      tags:
        - elk

    - name: Tag Elasticsearch Docker image
      shell: 'docker tag docker.elastic.co/elasticsearch/elasticsearch:5.3.2 elasticsearch'
      tags:
        - elk

    - name: Pull Kibana Docker image
      shell: 'docker pull docker.elastic.co/kibana/kibana:5.3.2'
      tags:
        - elk

    - name: Tag Kibana Docker image
      shell: 'docker tag docker.elastic.co/kibana/kibana:5.3.2 kibana'
      tags:
        - elk

    - name: Pull Logstash Docker image
      shell: 'docker pull docker.elastic.co/logstash/logstash:5.3.2'
      tags:
        - elk

    - name: Tag Logstash Docker image
      shell: 'docker tag docker.elastic.co/logstash/logstash:5.3.2 logstash'
      tags:
        - elk

    - name: Check if Elasticsearch service is running
      shell: 'docker service inspect elasticsearch'
      changed_when: false
      run_once: true
      register: elasticsearchsvc
      ignore_errors: true
      tags:
        - elk

    - name: Start Elasticsearch service
      shell: docker service create --mode global --name elasticsearch --network ebmedsnet --publish 9200:9200 -e ES_JAVA_OPTS="-Xms2g -Xmx2g" --mount src=elasticsearch,dst=/usr/share/elasticsearch/data elasticsearch bash -c 'bin/elasticsearch -Enetwork.bind_host=0.0.0.0 -Enetwork.publish_host=$(ip a | sed -n "s/.*inet \(.*\)\/24.*/\1/p") -Ediscovery.zen.minimum_master_nodes=2 -Ediscovery.zen.ping.unicast.hosts=elasticsearch -Ecluster.name=ebmeds-logs -Expack.security.enabled=false'
      when: elasticsearchsvc.rc != 0
      run_once: true
      tags:
        - elk

    - name: Check if Kibana service is running
      shell: 'docker service inspect kibana'
      changed_when: false
      run_once: true
      register: kibanasvc
      ignore_errors: true
      tags:
        - elk

    - name: Start Kibana service
      shell: 'docker service create --mode global --name kibana --network ebmedsnet --publish 5601:5601 --mount src=kibana,dst=/usr/share/kibana/config kibana'
      when: kibanasvc.rc != 0
      run_once: true
      tags:
        - elk

    - name: Check if Logstash service is running
      shell: 'docker service inspect logstash'
      changed_when: false
      run_once: true
      register: logstashsvc
      ignore_errors: true
      tags:
        - elk

    - name: Start Logstash service
      shell: 'docker service create --mode global --name logstash --network ebmedsnet -e LS_JAVA_OPTS="-Xmx256m -Xms256m" -e PATH_CONFIG="/usr/share/logstash/pipeline" --mount src=logstash-config,dst=/usr/share/logstash/config --mount src=logstash-pipeline,dst=/usr/share/logstash/pipeline --mount src=logstash-queue,dst=/usr/share/logstash/data/queue logstash'
      when: logstashsvc.rc != 0
      run_once: true
      tags:
        - elk

    - name: Pull latest API Gateway Docker image
      shell: 'docker pull quay.io/duodecim/ebmeds-api-gateway:{{ docker_image_tag }}'

    - name: Tag API Gateway Docker image
      shell: 'docker tag quay.io/duodecim/ebmeds-api-gateway:{{ docker_image_tag }} api-gateway'

    - name: Pull latest EBMeDS Engine Docker image
      shell: 'docker pull quay.io/duodecim/ebmeds-engine:{{ docker_image_tag }}'

    - name: Tag EBMeDS Engine Docker image
      shell: 'docker tag quay.io/duodecim/ebmeds-engine:{{ docker_image_tag }} engine'

    - name: Pull latest Coaching Docker image
      shell: 'docker pull quay.io/duodecim/ebmeds-coaching:{{ docker_image_tag }}'

    - name: Tag Coaching Docker image
      shell: 'docker tag quay.io/duodecim/ebmeds-coaching:{{ docker_image_tag }} coaching'

    - name: Check if API Gateway service is running
      shell: 'docker service inspect api-gateway'
      changed_when: false
      run_once: true
      register: apigatewaysvc
      ignore_errors: true

    - name: Start API Gateway service
      shell: 'docker service create --name api-gateway -e LISTEN_PORT=3001 -e ENGINE_URL=http://engine:3002/dss.asp?mode=test --network ebmedsnet --publish 3001:3001 --replicas={{ apigateway_replicas }} --update-delay 10s --update-parallelism 1 api-gateway'
      when: apigatewaysvc.rc != 0
      run_once: true

    - name: Check if EBMeDS Engine service is running
      shell: 'docker service inspect engine'
      changed_when: false
      run_once: true
      register: enginesvc
      ignore_errors: true

    - name: Start EBMeDS Engine service
      shell: 'docker service create --name engine --publish 3002:3002 --network ebmedsnet -e LISTEN_PORT=3002 -e SERVER_CACHE=yes -e LOG_LEVEL=info -e LOG_REQUEST=yes -e LOG_RESPONSE=yes -e LOG_TTL=6 -e DSS_VERSION=1.2 -e DRUG_INTERACTION_CODE_SYSTEM_PREFERENCE=VNR:SFI\|DKD:DK\|ATC:SFI -e ALLOW_INTERACTION_DISPLAY_BLOCKING=yes -e ALLOW_RENBASE_DISPLAY_BLOCKING=yes -e CHECK_ALL_INTERACTIONS=no -e STYLE_AND_IMAGE_LINKING=http -e WRITE_HTML_TO_SYSLOG=no -e SYSLOG_TTL=7 -e DEVELOPMENT=P -e DIAGNOSIS_PERIOD_ESTIMATION=no -e FEEDBACK_SEND_METHOD=post -e GRAV_LACT_DRUG_COMPONENT_NAMESPACE=ATC:DLV -e LAB_TEST_ESTIMATION=yes -e VIEW_FILE_TTL=2 -e VIEW_FILE_SAVE_METHOD=file -e RENAL_DRUG_COMPONENT_NAMESPACE=ATC:DLV -e RESPONSE_ENCODING=utf-8 -e RESPONSE_CHARSET=utf-8 -e CMR_VIEW_TTL=1 --replicas={{ engine_replicas }} --update-delay 10s --update-parallelism 1 engine'
      when: enginesvc.rc != 0
      run_once: true

    - name: Check if Coaching service is running
      shell: 'docker service inspect coaching'
      changed_when: false
      run_once: true
      register: coachingsvc
      ignore_errors: true

    - name: Start Coaching service
      shell: 'docker service create --name coaching --network ebmedsnet --replicas={{ coaching_replicas }} --update-delay 10s --update-parallelism 1 coaching'
      when: coachingsvc.rc != 0
      run_once: true